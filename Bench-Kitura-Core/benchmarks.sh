#!/bin/bash
#
# Defines the benchmark suite by overriding setParams.
#
# Overrides setupBenchmark to generate a payload file for StaticFile
# Overrides postBenchmark to clean up excess logs generated by HelloLogging
#

#
# Override ITERATIONS, DURATION and CLIENTS to perform a quick verification
# (functional correctness) using the standard benchmark execution mechanism.
#
function verifyTest {
    local BENCHMARK_NAME="$1"

    BENCHMARK_MODE="verify"
    executeTest "$BENCHMARK_NAME"
}

function setParams {
    local TESTNAME="$1"

    case "$TESTNAME" in
    HelloWorld)
      ;;
    HelloLogging)
      URL="http://localhost:8080/log"
      ;;
    HelloSSL)
      URL="https://localhost:8443/plaintext"
      PRE_RUN_SCRIPT="$dir/scripts/ssl_setup.sh"
      ;;
    HelloSSLHandshake)
      IMPLEMENTATION="HelloSSL"
      URL="https://localhost:8443/plaintext"
      PRE_RUN_SCRIPT="$dir/scripts/ssl_setup.sh"
      DRIVER="wrk-nokeepalive"
      ;;
    JSONEncoderDouble)
      ITERATIONS=2
      IMPLEMENTATION="Codable"
      URL="http://localhost:8080/json/Double"
      ;;
    JSONDecoderDouble)
      ITERATIONS=2
      IMPLEMENTATION="Codable"
      URL="http://localhost:8080/post/Double"
      WRK_SCRIPT="$dir/payloads/dblPayload.lua"
      ;;
    JSONEncoderSmallStruct)
      ITERATIONS=2
      IMPLEMENTATION="CodableSmall"
      URL="http://localhost:8080/json/Small"
      ;;
    JSONDecoderSmallStruct)
      ITERATIONS=2
      IMPLEMENTATION="CodableSmall"
      URL="http://localhost:8080/post/smallJson"
      WRK_SCRIPT="$dir/payloads/jsonRawSmall.lua"
      ;;
    JSONDouble)
      IMPLEMENTATION="JSON"
      URL="http://localhost:8080/json/Double"
      ;;
    SwiftyJSONDouble)
      IMPLEMENTATION="JSONSwifty"
      URL="http://localhost:8080/json/Double"
      ;;
    JSONParsing)
      IMPLEMENTATION="JSON"
      URL="http://localhost:8080/post/Double"
      WRK_SCRIPT="$dir/payloads/jsonRawPayload.lua"
      ;;
    SwiftyJSONParsing)
      IMPLEMENTATION="JSON"
      URL="http://localhost:8080/post/Double"
      WRK_SCRIPT="$dir/payloads/jsonPayload.lua"
      ;;
    StaticFile-trivial)
      IMPLEMENTATION="StaticFile"
      URL="http://localhost:8080/file/hello.txt"
      DURATION=60
      ITERATIONS=2
      ;;
    StaticFile-16M)
      IMPLEMENTATION="StaticFile"
      URL="http://localhost:8080/file/test16M"
      DURATION=60
      ITERATIONS=2
      ;;
    BrowserSimulation)
      IMPLEMENTATION="HelloMiddleware"
      URL="http://localhost:8080/"
      CLIENTS=10
      DURATION=300
      ITERATIONS=1
      DRIVER="jmeter"
      JMETER_SCRIPT="$dir/jmeter/Browser.jmx"
      ;;
    ThinkTimeSync)
      IMPLEMENTATION="ThinkTime"
      URL="http://localhost:8080/think/sync"
      CLIENTS=1000
      # Simulate a 50ms synchronous 'think time' (eg. blocking IO)
      export THINKTIME=50
      ;;
    ThinkTimeAsync)
      IMPLEMENTATION="ThinkTime"
      URL="http://localhost:8080/think/async"
      CLIENTS=1000
      # Simulate a 50ms asynchronous 'think time' (eg. async IO)
      export THINKTIME=50
      ;;
    CodableRoutingGet)
      IMPLEMENTATION="CodableRouting"
      URL="http://localhost:8080/getHelloId/123"
      ;;
    CodableRoutingPost)
      IMPLEMENTATION="CodableRouting"
      URL="http://localhost:8080/postHello"
      WRK_SCRIPT="$dir/payloads/simpleStructPayload.lua"
      ;;
    CodableRoutingGetAccept)
      IMPLEMENTATION="CodableRouting"
      URL="http://localhost:8080/getHelloId/123"
      # Add an Accept header to trigger Media Type processing
      WRK_SCRIPT="$dir/payloads/get_accept.lua"
      ;;
    CodableRoutingPostAccept)
      IMPLEMENTATION="CodableRouting"
      URL="http://localhost:8080/postHello"
      # Add an Accept header to trigger Media Type processing
      WRK_SCRIPT="$dir/payloads/simpleStructPayload_accept.lua"
      ;;
    *)
      echo "Unknown test '$TESTNAME'"
      ;;
    esac

    # Override ITERATIONS, DURATION and CLIENTS in verify mode
    if [ "$BENCHMARK_MODE" = "verify" ]; then
      ITERATIONS=1
      DURATION=10
      CLIENTS=4
    fi
}

function setupBenchmark {
    local TESTNAME="$1"
    case "$TESTNAME" in
    StaticFile-16M)
      # Generate payload
      dd if=/dev/zero of=$dir/public/test16M bs=1024 count=16384
      ;;
    *)
      ;;
    esac
}

function postBenchmark {
    local TESTNAME="$1"
    case "$TESTNAME" in
    HelloLogging)
      # Truncate application log for HelloLogging, as we will have generated a large number
      # of repeated (uninteresting) log statements
      for FILE in `find $RUNNAME/runs/ -name 'app1.log'`; do
        head $FILE > tmp && echo "..." >> tmp && tail $FILE >> tmp && mv tmp $FILE
      done
      ;;
    *)
      ;;
    esac
}
